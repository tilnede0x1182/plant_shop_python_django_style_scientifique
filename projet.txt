
# manage.py

#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plant_shop_python_django.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

# plant_shop/admin.py

from django.contrib import admin

# Register your models here.

# plant_shop/apps.py

from django.apps import AppConfig


class PlantShopConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'plant_shop'

# plant_shop/backends.py

from django.contrib.auth.backends import ModelBackend
from django.contrib.auth import get_user_model

class EmailBackend(ModelBackend):
    def authenticate(self, request, username=None, password=None, **kwargs):
        User = get_user_model()
        try:
            user = User.objects.get(email=username)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            return None

# plant_shop/forms.py

from django import forms
from django.contrib.auth.forms import UserCreationForm
from .models import User

class CustomUserCreationForm(UserCreationForm):
    class Meta:
        model = User
        fields = ["email", "name"]

# plant_shop/__init__.py


# plant_shop/management/commands/seed.py

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from plant_shop.models import Plant, Order, OrderItem
from faker import Faker
import random, pathlib

class Command(BaseCommand):
    help = "Equivalent seeds.rb"

    def handle(self, *args, **opts):
        self.stdout.write("🔄 Initialisation de la seed...")
        fake = Faker("fr_FR")
        txt = pathlib.Path("users.txt").open("w", encoding="utf-8")
        self.stdout.write("🧹 Suppression des données existantes...")
        OrderItem.objects.all().delete()
        Order.objects.all().delete()
        Plant.objects.all().delete()
        User = get_user_model()
        User.objects.all().delete()

        self.stdout.write("👤 Création des utilisateurs...")
        admins, users = [], []
        for i in range(3):
            admins.append(User.objects.create_user(
                email=f"admin{i+1}@example.com",
                password="password", admin=True, name=fake.name()))

        for _ in range(20):
            users.append(User.objects.create_user(
                email=fake.unique.email(), password="password",
                admin=False, name=fake.name()))

        txt.write("Liste des utilisateurs générés :\n")
        txt.write("\nAdmins\n\n");  [txt.write(f"{u.email} password\n") for u in admins]
        txt.write("\nUtilisateurs normaux\n\n"); [txt.write(f"{u.email} password\n") for u in users]; txt.close()

        self.stdout.write("🌱 Création des plantes...")
        plants=[]
        for _ in range(30):
            plants.append(Plant.objects.create(
                name=" ".join(fake.words(2)), price=random.randint(5,50),
                description=fake.sentence(nb_words=10), stock=random.randint(5,30)))

        self.stdout.write("🧾 Création des commandes...")
        for u in admins+users:
            o = Order.objects.create(user=u, total_price=0,
                                     status=random.choice(["confirmed","pending","shipped","delivered"]))
            total=0
            for _ in range(2):
                p=random.choice(plants); qty=min(random.randint(1,5),p.stock)
                if qty==0: continue
                OrderItem.objects.create(order=o, plant=p, quantity=qty)
                p.stock-=qty; p.save(update_fields=["stock"])
                total+=p.price*qty
            o.total_price=total; o.save(update_fields=["total_price"])
        self.stdout.write("✅ Seed terminée.")

# plant_shop/models.py

from django.contrib.auth.models import AbstractBaseUser, BaseUserManager, PermissionsMixin
from django.db import models

class UserManager(BaseUserManager):
    def create_user(self, email, password=None, name="", admin=False):
        if not email:
            raise ValueError("L'email est requis")
        email = self.normalize_email(email)
        user = self.model(email=email, name=name, admin=admin)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password, name=""):
        return self.create_user(email=email, password=password, name=name, admin=True)

class User(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=150, blank=True)
    admin = models.BooleanField(default=False)
    is_active = models.BooleanField(default=True)

    objects = UserManager()

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['name']

    def __str__(self):
        return self.email

    @property
    def is_staff(self):
        return self.admin

class Plant(models.Model):
    name        = models.CharField(max_length=100)
    price       = models.PositiveIntegerField()
    description = models.TextField()
    stock       = models.PositiveIntegerField()
    def __str__(self): return self.name

class Order(models.Model):
    STATUS = [("confirmed","confirmed"),("pending","pending"),
              ("shipped","shipped"),("delivered","delivered")]
    user        = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders")
    total_price = models.PositiveIntegerField(default=0)
    status      = models.CharField(max_length=10, choices=STATUS)
    created_at  = models.DateTimeField(auto_now_add=True)

class OrderItem(models.Model):
    order    = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="items")
    plant    = models.ForeignKey(Plant, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField()

# plant_shop_python_django/asgi.py

"""
ASGI config for plant_shop_python_django project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plant_shop_python_django.settings')

application = get_asgi_application()

# plant_shop_python_django/__init__.py


# plant_shop_python_django/settings.py

from pathlib import Path
BASE_DIR = Path(__file__).resolve().parent.parent
SECRET_KEY = "dev-secret-key"
DEBUG = True
ALLOWED_HOSTS = []

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "plant_shop",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "plant_shop_python_django.urls"
TEMPLATES = [{
    "BACKEND": "django.template.backends.django.DjangoTemplates",
    "DIRS": [BASE_DIR / "plant_shop" / "templates"],
    "APP_DIRS": True,
    "OPTIONS": {"context_processors": [
        "django.template.context_processors.debug",
        "django.template.context_processors.request",
        "django.contrib.auth.context_processors.auth",
        "django.contrib.messages.context_processors.messages",
    ]},
}]
WSGI_APPLICATION = "plant_shop_python_django.wsgi.application"

DATABASES = {"default": {"ENGINE": "django.db.backends.sqlite3",
                         "NAME": BASE_DIR / "db.sqlite3"}}

LANGUAGE_CODE = "fr-fr"
TIME_ZONE = "Europe/Paris"
STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "plant_shop" / "static"]
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "plant_shop.User"
AUTHENTICATION_BACKENDS = ["plant_shop.backends.EmailBackend"]
LOGIN_REDIRECT_URL = "/"

# plant_shop_python_django/urls.py

from django.contrib import admin
from django.urls import path, include
urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include("plant_shop.urls")),
]

# plant_shop_python_django/wsgi.py

"""
WSGI config for plant_shop_python_django project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plant_shop_python_django.settings')

application = get_wsgi_application()

# plant_shop/static/css/app.css

:root{--elec-blue:#0066ff;--fun-green:#00c851;--fun-orange:#ff6d00;--fun-yellow:#ffdd00}
.card-fun{position:relative;background:rgba(0,102,255,.05);border:1px solid var(--elec-blue);
   border-radius:1rem 1rem 0 1rem;padding:1rem}
.card-fun::after{content:"";position:absolute;right:-10px;top:-10px;
   border-width:0 0 40px 40px;border-style:solid;border-color:transparent transparent var(--fun-orange) transparent;opacity:.75}
.btn-green{background:var(--fun-green);color:#fff}
.btn-orange{background:var(--fun-orange);color:#fff}
.grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: 1rem;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: var(--elec-blue);
  padding: 1rem;
  border-radius: 0 0 1rem 1rem;
}

.navbar-left,
.navbar-right {
  display: flex;
  align-items: center;
}

.navbar-right a {
  margin-left: 1rem;
}

.navbar a {
  color: white;
  text-decoration: none;
  font-weight: bold;
}
.navbar a:hover {
  text-decoration: underline;
}
.hidden {
  display: none;
}

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: var(--elec-blue);
  padding: 1rem;
  border-radius: 0 0 1rem 1rem;
}
.navbar-left .shop-logo {
  font-weight: bold;
  font-size: 1.2rem;
  color: white;
  text-decoration: none;
}
.navbar-right {
  display: flex;
  align-items: center;
  gap: 1.5rem;
}
.navbar a {
  color: white;
  text-decoration: none;
  font-weight: bold;
}
.navbar a:hover {
  text-decoration: underline;
}

.dropdown {
  position: relative;
}

.dropdown-menu {
  display: none;
  position: absolute;
  right: 0;
  background: white;
  padding: 0.5rem;
  border: 1px solid var(--elec-blue);
  border-radius: 0.5rem;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  z-index: 1000;
}

.dropdown-menu a {
  display: block;
  color: var(--elec-blue);
  text-decoration: none;
  padding: 0.25rem 0;
}

.dropdown-menu.show {
  display: block;
}

# plant_shop/static/js/app.js

// Copie littérale du application.js Rails
window.Cart = {
	get: function () {
		try {
			return JSON.parse(localStorage.getItem("cart") || "{}");
		} catch (t) {
			return {};
		}
	},
	save: function (t) {
		localStorage.setItem("cart", JSON.stringify(t));
	},
	add: function (t, e, r) {
		const a = this.get();
		a[t]
			? (a[t].quantity += 1)
			: (a[t] = { id: t, name: e, price: r, quantity: 1 }),
			this.save(a),
			this.updateNavbarCount();
	},
	update: function (t, e) {
		const r = parseInt(e);
		if (isNaN(r) || r < 1) return alert("Quantité invalide");
		const a = this.get();
		a[t] && ((a[t].quantity = r), this.save(a), this.render());
	},
	remove: function (t) {
		const e = this.get();
		delete e[t], this.save(e), this.render();
	},
  clear: function () {
    localStorage.removeItem("cart"),
    this.render(),
    this.updateNavbarCount();
  },
	updateNavbarCount: function () {
		const t = this.get();
		let e = 0;
		for (const r in t) e += t[r].quantity;
		const a = document.getElementById("cart-link");
		a && (a.innerText = "🛒 Panier" + (e > 0 ? " (" + e + ")" : ""));
	},
	renderOrderReview: function (
		t = "order-review-container",
		e = "order-items-input"
	) {
		const r = document.getElementById(t),
			a = document.getElementById(e),
			n = this.get();
		let i = 0;
		if (!r || !a) return;
		if (0 === Object.keys(n).length)
			return (
				(r.innerHTML =
					'<p class="alert alert-warning">Votre panier est vide.</p>'),
				void (a.value = "")
			);
		let l =
			'<table class="table shadow"><thead class="table-dark"><tr><th>Plante</th><th>Quantité</th><th>Total</th></tr></thead><tbody>';
		const o = [];
		for (const t in n) {
			const e = n[t],
				r = e.quantity * e.price;
			i += r;
			const a =
				"order-review-container" === t
					? "cart-plant-link confirmed"
					: "cart-plant-link";
			(l +=
				"<tr><td><a href='/plants/" +
				e.id +
				"' class='" +
				a +
				"'>" +
				e.name +
				"</a></td><td>" +
				e.quantity +
				"</td><td>" +
				r +
				" €</td></tr>"),
				o.push({ plant_id: parseInt(t), quantity: e.quantity });
		}
		(l += "</tbody></table>"),
			(l += "<p class='text-end fw-bold'>Total : " + i + " €</p>"),
			(r.innerHTML = l),
			(a.value = JSON.stringify(o));
	},
	render: function () {
		const t = document.getElementById("cart-container");
		if (!t) return;
		const e = this.get();
		let r = "",
			a = 0;
		if (0 === Object.keys(e).length)
			r = "<p class='alert alert-info'>Votre panier est vide.</p>";
		else {
			r += `\n        <table class="table">\n          <thead class="table-dark">\n            <tr>\n              <th>Plante</th>\n              <th>Quantité</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n      `;
			for (const t in e) {
				const n = e[t];
				(a += n.price * n.quantity),
					(r +=
						`\n          <tr>\n            <td><a href="/plants/` +
						t +
						`" class="text-decoration-none">` +
						n.name +
						`</a></td>\n            <td>\n              <input type="number" min="1" class="form-control form-control-sm" style="max-width:44px;" value="` +
						n.quantity +
						`" onchange="Cart.update(` +
						t +
						`, this.value)">\n            </td>\n            <td>\n              <button class="btn btn-danger btn-sm" onclick="Cart.remove(` +
						t +
						`)">Retirer</button>\n            </td>\n          </tr>\n        `);
			}
			r +=
				`\n          </tbody>\n        </table>\n        <p class="text-end fw-bold">Total : ` +
				a +
				` €</p>\n        <div class="d-flex justify-content-between">\n          <button class="btn btn-outline-secondary btn-sm" onclick="Cart.clear()">Vider le panier</button>\n          <a href="/orders/new" class="btn btn-primary">Passer la commande</a>\n        </div>\n      `;
		}
		t.innerHTML = r;
	},
};
document.addEventListener("DOMContentLoaded", function () {
	Cart.renderOrderReview(), Cart.updateNavbarCount(), Cart.render();
});

document.addEventListener("DOMContentLoaded", function () {
  // Dropdown logic
  const toggle = document.querySelector(".dropdown-toggle");
  const menu = document.querySelector(".dropdown-menu");

  toggle.addEventListener("click", function (e) {
    e.preventDefault();
    menu.classList.toggle("show");
  });

  document.addEventListener("click", function (e) {
    if (!e.target.closest(".dropdown")) {
      menu.classList.remove("show");
    }
  });

  // Init cart
  Cart.renderOrderReview();
  Cart.updateNavbarCount();
  Cart.render();
});

# plant_shop/templates/admin/plants/edit.html

{% extends "layouts/base.html" %}
{% block title %}Modifier plante{% endblock %}
{% block content %}
<h1>✏️ Modifier {{ plant.name }}</h1>
<form method="post">{% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn-green">Mettre à jour</button>
</form>
<a href="{% url 'admin_plants' %}">← Retour</a>
{% endblock %}

# plant_shop/templates/admin/plants/index.html

{% extends "layouts/base.html" %}
{% block title %}Plantes Admin{% endblock %}
{% block content %}
<h1>🌿 Plantes (Admin)</h1>
<a href="{% url 'admin_plants_new' %}" class="btn btn-green mb-3">➕ Nouvelle plante</a>
<table class="table">
	<thead>
		<tr>
			<th>Nom</th>
			<th>Prix</th>
			<th>Stock</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		{% for plant in plants %}
		<tr>
			<td><a href="{% url 'plant_show' plant.id %}">{{ plant.name }}</a></td>
			<td>{{ plant.price }} €</td>
			<td>{{ plant.stock }}</td>
			<td><a href="{% url 'admin_plants_edit' plant.id %}" class="btn btn-warning btn-sm">✏️</a></td>
			<td>
				<form method="post" action="{% url 'admin_plants_delete' plant.id %}" style="display:inline;"
					onsubmit="return confirm('Supprimer cette plante ?');">
					{% csrf_token %}
					<button class="btn btn-danger btn-sm">🗑️</button>
				</form>
			</td>
		</tr>
		{% endfor %}
	</tbody>
</table>
{% endblock %}

# plant_shop/templates/admin/plants/new.html

{% extends "layouts/base.html" %}
{% block title %}Nouvelle plante{% endblock %}
{% block content %}
<h1>Nouvelle plante</h1>
<form method="post">{% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn-green">Créer</button>
</form>
<a href="{% url 'admin_plants' %}">← Retour</a>
{% endblock %}

# plant_shop/templates/admin/users/edit.html

{% extends "layouts/base.html" %}
{% block title %}Modifier utilisateur{% endblock %}
{% block content %}
<h1>✏️ Modifier {{ user.email }}</h1>
<form method="post">{% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn-green">Mettre à jour</button>
</form>
<a href="{% url 'admin_users' %}">← Retour</a>
{% endblock %}

# plant_shop/templates/admin/users/index.html

{% extends "layouts/base.html" %}
{% block title %}Utilisateurs Admin{% endblock %}
{% block content %}
<h1>👥 Utilisateurs (Admin)</h1>
<a href="{% url 'admin_users_new' %}" class="btn btn-green mb-3">➕ Nouvel utilisateur</a>
<table class="table">
	<thead>
		<tr>
			<th>Email</th>
			<th>Nom</th>
			<th>Admin</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		{% for user in users %}
		<tr>
			<td><a href="{% url 'admin_users_show' user.id %}">{{ user.name }}</a></td>
			<td>{{ user.email }}</td>
			<td>{{ user.admin|yesno:"✅,❌" }}</td>
			<td><a href="{% url 'admin_users_edit' user.id %}" class="btn btn-warning btn-sm">✏️</a></td>
			<td>
				<form method="post" action="{% url 'admin_users_delete' user.id %}" style="display:inline;"
					onsubmit="return confirm('Supprimer cet utilisateur ?');">
					{% csrf_token %}
					<button class="btn btn-danger btn-sm">🗑️</button>
				</form>
			</td>
		</tr>
		{% endfor %}
	</tbody>
</table>
{% endblock %}

# plant_shop/templates/admin/users/new.html

{% extends "layouts/base.html" %}
{% block title %}Nouvel utilisateur{% endblock %}
{% block content %}
<h1>Nouvel utilisateur</h1>
<form method="post">{% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn-green">Créer</button>
</form>
<a href="{% url 'admin_users' %}">← Retour</a>
{% endblock %}

# plant_shop/templates/admin/users/show.html

{% extends "layouts/base.html" %}
{% block title %}Admin - {{ user.name|title }}{% endblock %}
{% block content %}
<h1>👤 {{ user.name|title }}</h1>
<ul>
  <li><strong>Email :</strong> {{ user.email }}</li>
  <li><strong>Admin :</strong> {{ user.admin|yesno:"Oui,Non" }}</li>
</ul>

<div class="d-flex gap-2">
  <a href="{% url 'admin_users_edit' user.id %}" class="btn btn-warning">✏️ Modifier</a>
  <form method="post" action="{% url 'admin_users_delete' user.id %}" onsubmit="return confirm('Supprimer cet utilisateur ?');">
    {% csrf_token %}
    <button type="submit" class="btn btn-danger">🗑️ Supprimer</button>
  </form>
</div>

<a href="{% url 'admin_users' %}" class="btn btn-secondary mt-3">← Retour</a>
{% endblock %}

# plant_shop/templates/carts/index.html

{% extends "layouts/base.html" %}{% block title %}Panier{% endblock %}
{% block content %}<h1 class="text-center mb-4">🛒 Mon Panier</h1><div id="cart-container"></div>{% endblock %}

# plant_shop/templates/layouts/base.html

<!DOCTYPE html>
<html lang="fr">

<head>
	<meta charset="utf-8">
	<title>{% block title %}PlantShop{% endblock %}</title>
	{% load static %}
	<link rel="icon" href="{% static 'favicon.ico' %}" type="image/x-icon">
	<!-- <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"> -->
	<link rel="stylesheet" href="{% static 'css/app.css' %}">
	<script src="https://unpkg.com/react@18/umd/react.production.min.js" defer></script>
	<script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js" defer></script>
</head>

<body>
	{% include "layouts/_navbar.html" %}
	{% block content %}{% endblock %}
	<script src="{% static 'js/app.js' %}" defer></script>
</body>

</html>

# plant_shop/templates/layouts/_navbar.html

<nav class="navbar">
	<div class="navbar-left">
		<a href="{% url 'root' %}" class="shop-logo">🌿 PlantShop</a>
	</div>
	<div class="navbar-right">
		{% if user.is_authenticated %}
		<span style="color:white; font-weight:bold; margin-right: 1rem;">
			{{ user.name|title }}{% if user.admin %} (Administrateur){% endif %}
		</span>
		{% endif %}
		<a id="cart-link" href="{% url 'cart_index' %}">🛒 Panier</a>
		{% if not user.is_authenticated %}
		<a href="{% url 'login' %}">🔐 Connexion</a>
		<a href="{% url 'signup' %}">📝 Inscription</a>
		{% endif %}
		{% if user.is_authenticated %}
		<a href="{% url 'profile' %}">👤 Mon Profil</a>
		<a href="{% url 'orders_index' %}">📦 Commandes</a>
		{% if user.admin %}
		<div class="dropdown">
			<a href="#" class="dropdown-toggle">🔧 Admin ▼</a>
			<div class="dropdown-menu">
				<a href="{% url 'admin_plants' %}">Gestion Plantes</a>
				<a href="{% url 'admin_users' %}">Gestion Utilisateurs</a>
			</div>
		</div>
		{% endif %}
		<a href="{% url 'logout' %}">🚪 Déconnexion</a>
		{% endif %}
	</div>
</nav>

# plant_shop/templates/orders/index.html

{% extends "layouts/base.html" %}
{% block title %}Mes Commandes{% endblock %}
{% block content %}
<h1>📦 Mes Commandes</h1>
{% if orders %}
  <ul>
    {% for order in orders %}
      <li>
        <strong>Commande n°{{ order.display_number }}</strong> — {{ order.status }} — {{ order.total_price }} €
        <ul>
          {% for item in order.items.all %}
          <li>{{ item.quantity }} × {{ item.plant.name }}</li>
          {% endfor %}
        </ul>
      </li>
    {% endfor %}
  </ul>
{% else %}
  <p>Aucune commande.</p>
{% endif %}

<script>
if (window.location.search.includes("cleared=1")) {
  Cart.clear();
}
</script>
{% endblock %}

# plant_shop/templates/orders/new.html

{% extends "layouts/base.html" %}
{% block title %}Nouvelle commande{% endblock %}
{% block content %}
<h1>📦 Nouvelle Commande</h1>
<form method="post" action="{% url 'order_create' %}">
  {% csrf_token %}
  <input type="hidden" id="order-items-input" name="items">
  <div id="order-review-container"></div>
  <div class="text-end mt-3">
    <button class="btn-green" type="submit">Confirmer la commande</button>
  </div>
</form>
{% endblock %}

{% if request.GET.cleared %}
<script>
  Cart.clear();
</script>
{% endif %}

# plant_shop/templates/plants/index.html

{% extends "layouts/base.html" %}{% block title %}Plantes{% endblock %}
{% block content %}
{% if request.user.is_authenticated and request.user.admin %}
<div class="text-end mb-3" style="margin-top: 2rem;">
	<a href="{% url 'admin_plants_new' %}" class="btn btn-green">Nouvelle Plante</a>
</div>
{% endif %}
<div class="grid" style="margin-top: 2rem;">
	{% for plant in plants %}
	<div class="card-fun mb-3">
		<h3><a href="{% url 'plant_show' plant.id %}">{{ plant.name }}</a></h3>
		<p><strong>Prix :</strong> {{ plant.price }} € — <strong>Stock :</strong> {{ plant.stock }}</p>
		<button class="btn-green w-100"
			onclick="Cart.add({{ plant.id }}, '{{ plant.name|escapejs }}', {{ plant.price }})">Ajouter au panier</button>
	</div>
	{% endfor %}
</div>
{% endblock %}

# plant_shop/templates/plants/show.html

{% extends "layouts/base.html" %}
{% block title %}{{ plant.name }}{% endblock %}

{% block content %}
<h1 class="mb-4">{{ plant.name }}</h1>
<div class="card-fun mb-4">
  <p><strong>Prix :</strong> {{ plant.price }} €</p>
  <p><strong>Stock :</strong> {{ plant.stock }}</p>
  <p>{{ plant.description }}</p>
  <button class="btn-green w-100" onclick="Cart.add({{ plant.id }}, '{{ plant.name|escapejs }}', {{ plant.price }})">Ajouter au panier</button>
</div>

{% if user.is_authenticated and user.admin %}
  <div class="d-flex gap-2">
    <a href="{% url 'admin_plants_edit' plant.id %}" class="btn btn-warning">✏️ Modifier</a>
    <form method="post" action="{% url 'admin_plants_delete' plant.id %}" onsubmit="return confirm('Supprimer cette plante ?');">
      {% csrf_token %}
      <button class="btn btn-danger">🗑️ Supprimer</button>
    </form>
  </div>
{% endif %}
<a href="{% url 'plants_index' %}">← Retour à la liste</a>
{% endblock %}

# plant_shop/templates/users/login.html

{% extends "layouts/base.html" %}
{% block title %}Connexion{% endblock %}
{% block content %}
<h1>🔐 Connexion</h1>
<form method="post">
  {% csrf_token %}
  {% if form.errors %}
    <div class="alert alert-danger">Nom d'utilisateur ou mot de passe invalide.</div>
  {% endif %}
	<div>
		<label>Email :</label>
		<input type="email" name="username" required>
	</div>
  <div>
    <label>Mot de passe :</label>
    <input type="password" name="password" required>
  </div>
  <button class="btn-green" type="submit">Se connecter</button>
</form>
{% endblock %}

# plant_shop/templates/users/profile.html

{% extends "layouts/base.html" %}
{% block title %}Mon Profil{% endblock %}
{% block content %}
<h1>👤 Mon Profil</h1>
<ul>
  <li><strong>Nom d'utilisateur :</strong> {{ user.username }}</li>
  <li><strong>Email :</strong> {{ user.email }}</li>
  <li><strong>Nom complet :</strong> {{ user.name }}</li>
  <li><strong>Admin :</strong> {{ user.admin|yesno:"Oui,Non" }}</li>
</ul>
<a href="{% url 'admin_users_edit' user.id %}" class="btn btn-warning mt-3">✏️ Modifier mon profil</a>
{% endblock %}

# plant_shop/templates/users/signup.html

{% extends "layouts/base.html" %}
{% block title %}Inscription{% endblock %}
{% block content %}
<h1>Inscription</h1>
<form method="post">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit" class="btn-green">S'inscrire</button>
</form>
{% endblock %}

# plant_shop/tests.py

from django.test import TestCase

# Create your tests here.

# plant_shop/urls.py

from django.urls import path
from django.contrib.auth import views as auth_views
from . import views
from .views import LoginView

urlpatterns = [
    path("",                 views.plant_index,        name="root"),
    path("plants/",          views.plant_index,        name="plants_index"),
    path("plants/<int:pk>/", views.plant_show,         name="plant_show"),
    path("carts/",           views.cart_index,         name="cart_index"),
	path("profile/",         views.profile_view,       name="profile"),
    path("signup/",          views.signup,             name="signup"),
    path("logout/", auth_views.LogoutView.as_view(next_page="/"), name="logout"),
	path("orders/",          views.order_index,        name="orders_index"),
    path("orders/new/",      views.order_new,          name="order_new"),
    path("orders/create/",   views.order_create,       name="order_create"),
	path("accounts/login/", views.LoginView.as_view(), name="login"),
	path("manage/plants/", views.admin_plants_index, name="admin_plants"),
	path("manage/plants/new/", views.admin_plants_new, name="admin_plants_new"),
	path("manage/plants/<int:pk>/edit/", views.admin_plants_edit, name="admin_plants_edit"),
	path("manage/plants/<int:pk>/delete/", views.admin_plants_delete, name="admin_plants_delete"),
	path("manage/users/", views.admin_users_index, name="admin_users"),
	path("manage/users/<int:pk>/", views.admin_users_show, name="admin_users_show"),
	path("manage/users/new/", views.admin_users_new, name="admin_users_new"),
	path("manage/users/<int:pk>/edit/", views.admin_users_edit, name="admin_users_edit"),
	path("manage/users/<int:pk>/delete/", views.admin_users_delete, name="admin_users_delete"),
]

# plant_shop/views.py

from django.contrib.auth.decorators import login_required, user_passes_test
from django.shortcuts import render, redirect, get_object_or_404
from plant_shop.forms import CustomUserCreationForm
from .models import User, Plant, Order, OrderItem
from django.contrib.auth import login
from django.contrib import messages
import json

admin_required = user_passes_test(lambda u: u.is_authenticated and u.admin,
                                  login_url="/admin/")

def plant_index(request):
    return render(request, "plants/index.html", {"plants": Plant.objects.order_by("name")})

def plant_show(request, pk):
    return render(request, "plants/show.html", {"plant": get_object_or_404(Plant, pk=pk)})

def cart_index(request):
    return render(request, "carts/index.html")

def signup(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect("profile")
    else:
        form = CustomUserCreationForm()
    return render(request, "users/signup.html", {"form": form})

@login_required
def order_index(request):
    orders = list(request.user.orders.order_by("-created_at"))
    for i, order in enumerate(orders):
        order.display_number = len(orders) - i
    return render(request, "orders/index.html", {"orders": orders})

@login_required
def order_new(request):
    return render(request, "orders/new.html")

@login_required
def order_create(request):
    items = json.loads(request.POST.get("items", "[]"))
    order = Order.objects.create(user=request.user, status="confirmed")
    total = 0
    for it in items:
        plant = Plant.objects.get(pk=it["plant_id"])
        qty   = int(it["quantity"])
        OrderItem.objects.create(order=order, plant=plant, quantity=qty)
        plant.stock -= qty
        plant.save(update_fields=["stock"])
        total += plant.price * qty

        order.total_price = total
        order.save(update_fields=["total_price"])
        messages.success(request, "Commande confirmée.")
        return redirect("/orders/?cleared=1")

@login_required
def profile_view(request):
    return render(request, "users/profile.html", {"user": request.user})

@admin_required
def admin_plants_index(request):
    return render(request, "admin/plants/index.html", {"plants": Plant.objects.order_by("name")})

@admin_required
def admin_plants_new(request):
    from django.forms import modelform_factory
    PlantForm = modelform_factory(Plant, fields="__all__")
    if request.method == "POST" and (form := PlantForm(request.POST)).is_valid():
        form.save(); messages.success(request, "Plante créée."); return redirect("admin_plants")
    return render(request, "admin/plants/new.html", {"form": PlantForm()})

@admin_required
def admin_plants_edit(request, pk):
    plant = get_object_or_404(Plant, pk=pk)
    from django.forms import modelform_factory
    PlantForm = modelform_factory(Plant, fields="__all__")
    if request.method == "POST" and (form := PlantForm(request.POST, instance=plant)).is_valid():
        form.save(); messages.success(request, "Plante mise à jour."); return redirect("admin_plants")
    return render(request, "admin/plants/edit.html", {"form": PlantForm(instance=plant), "plant": plant})

@admin_required
def admin_plants_delete(request, pk):
    plant = get_object_or_404(Plant, pk=pk)
    if request.method == "POST":
        plant.delete()
        messages.success(request, "Plante supprimée.")
        return redirect("admin_plants")
    return redirect("plants_index")

@admin_required
def admin_users_index(request):
    return render(request, "admin/users/index.html", {"users": User.objects.order_by("-admin", "name")})

@admin_required
def admin_users_show(request, pk):
    user = get_object_or_404(User, pk=pk)
    return render(request, "admin/users/show.html", {"user": user})

@admin_required
def admin_users_new(request):
    from django.forms import modelform_factory
    UserForm = modelform_factory(User, fields=["email", "name", "admin"])
    if request.method == "POST" and (form := UserForm(request.POST)).is_valid():
        user = form.save(commit=False)
        user.set_password("password")
        user.save()
        messages.success(request, "Utilisateur créé.")
        return redirect("admin_users")
    return render(request, "admin/users/new.html", {"form": UserForm()})

@admin_required
def admin_users_edit(request, pk):
    user = get_object_or_404(User, pk=pk)
    from django.forms import modelform_factory
    UserForm = modelform_factory(User, fields=["email", "name", "admin"])
    if request.method == "POST" and (form := UserForm(request.POST, instance=user)).is_valid():
        form.save()
        messages.success(request, "Utilisateur mis à jour.")
        return redirect("admin_users")
    return render(request, "admin/users/edit.html", {"form": UserForm(instance=user), "user": user})

@admin_required
def admin_users_delete(request, pk):
    user = get_object_or_404(User, pk=pk)
    if request.method == "POST":
        user.delete()
        messages.success(request, "Utilisateur supprimé.")
    return redirect("admin_users")

from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth.views import LoginView as DjangoLoginView

class LoginView(DjangoLoginView):
    form_class = AuthenticationForm
    template_name = "users/login.html"

    def form_invalid(self, form):
        print("Formulaire invalide")
        print("Erreurs : ", form.errors)
        return super().form_invalid(form)

    def form_valid(self, form):
        print("Connexion réussie pour :", form.get_user())
        return super().form_valid(form)

# users.txt

Liste des utilisateurs générés :

Admins

admin1@example.com password
admin2@example.com password
admin3@example.com password

Utilisateurs normaux

bousquetdanielle@example.net password
gdubois@example.com password
penelopegomes@example.org password
louiserichard@example.net password
valetteanastasie@example.org password
dianeleveque@example.com password
adelaidepires@example.com password
nturpin@example.net password
richardsusan@example.net password
henriettetexier@example.net password
vdelannoy@example.org password
bruneaujules@example.net password
dijouxmargaret@example.net password
gilles92@example.com password
penelopefernandes@example.com password
raymond39@example.org password
suzanne50@example.org password
louiseteixeira@example.net password
girardsuzanne@example.com password
andree80@example.com password


# ===== STRUCTURE DU PROJET =====
.
├── db.sqlite3
├── Makefile
├── manage.py
├── plant_shop
│   ├── admin.py
│   ├── apps.py
│   ├── backends.py
│   ├── forms.py
│   ├── __init__.py
│   ├── management
│   │   └── commands
│   │       ├── __pycache__
│   │       │   └── seed.cpython-311.pyc
│   │       └── seed.py
│   ├── migrations
│   │   ├── 0001_initial.py
│   │   ├── 0002_alter_user_options_alter_user_managers_and_more.py
│   │   ├── __init__.py
│   │   └── __pycache__
│   │       ├── 0001_initial.cpython-311.pyc
│   │       ├── 0002_alter_user_options_alter_user_managers_and_more.cpython-311.pyc
│   │       └── __init__.cpython-311.pyc
│   ├── models.py
│   ├── __pycache__
│   │   ├── admin.cpython-311.pyc
│   │   ├── apps.cpython-311.pyc
│   │   ├── backends.cpython-311.pyc
│   │   ├── forms.cpython-311.pyc
│   │   ├── __init__.cpython-311.pyc
│   │   ├── models.cpython-311.pyc
│   │   ├── urls.cpython-311.pyc
│   │   └── views.cpython-311.pyc
│   ├── static
│   │   ├── css
│   │   │   └── app.css
│   │   ├── favicon.ico
│   │   ├── js
│   │   │   └── app.js
│   │   └── Plant_shop_détendu.ico:Zone.Identifier
│   ├── templates
│   │   ├── admin
│   │   │   ├── plants
│   │   │   │   ├── edit.html
│   │   │   │   ├── index.html
│   │   │   │   └── new.html
│   │   │   └── users
│   │   │       ├── edit.html
│   │   │       ├── index.html
│   │   │       ├── new.html
│   │   │       └── show.html
│   │   ├── carts
│   │   │   └── index.html
│   │   ├── layouts
│   │   │   ├── base.html
│   │   │   └── _navbar.html
│   │   ├── orders
│   │   │   ├── index.html
│   │   │   └── new.html
│   │   ├── plants
│   │   │   ├── index.html
│   │   │   └── show.html
│   │   └── users
│   │       ├── login.html
│   │       ├── profile.html
│   │       └── signup.html
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── plant_shop_python_django
│   ├── asgi.py
│   ├── __init__.py
│   ├── __pycache__
│   │   ├── __init__.cpython-311.pyc
│   │   ├── settings.cpython-311.pyc
│   │   ├── urls.cpython-311.pyc
│   │   └── wsgi.cpython-311.pyc
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── projet.txt
├── README.md
├── script.sh
└── users.txt

22 directories, 62 files
